=begin
SimplyRETS API

The SimplyRETS API is an exciting step towards making it easier for\ndevelopers and real estate agents to build something awesome with\nreal estate data!\n\nThe documentation below makes live requests to our API using the\ntrial data. To get set up with the API using live MLS data, you\nmust have RETS credentials from your MLS, which you can then use to\ncreate an app with SimplyRETS. For more information on that\nprocess, please see our [FAQ](https://simplyrets.com/faq), [Getting\nStarted](https://simplyrets.com/blog/getting-set-up.html) page, or\n[contact us](https://simplyrets.com/\\#home-contact).\n\nBelow you'll find the API endpoints, query parameters, response bodies,\nand other information about using the SimplyRETS API. You can run\nqueries by clicking the 'Try it Out' button at the bottom of each\nsection.\n\n### Authentication\nThe SimplyRETS API uses Basic Authentication. When you create an\napp, you'll get a set of API credentials to access your\nlistings. If you're trying out the test data, you can use\n`simplyrets:simplyrets` for connecting to the API.\n\n### Media Types\nThe SimplyRETS API uses the 'Accept' header to allow clients to\ncontrol media types (content versions). We maintain backwards\ncompatibility with API clients by allowing them to specify a\ncontent version. We highly recommend setting and explicity media\ntype when your application reaches production. Both the structure\nand content of our API response bodies is subject to change so we\ncan add new features while respecting the stability of applications\nwhich have already been developed.\n\nTo always use the latest SimplyRETS content version, simply use\n`application/json` in your application `Accept` header.\n\nIf you want to pin your clients media type to a specific version,\nyou can use the vendor-specific SimplyRETS media type, e.g.\n`application/vnd.simplyrets-v0.1+json\"`\n\nTo view all valid content-types for making an `OPTIONS`, make a\nrequest to the SimplyRETS api root\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`\n\nThe default media types used in our API responses may change in the\nfuture. If you're building an application and care about the\nstability of the API, be sure to request a specific media type in the\nAccept header as shown in the examples below.\n\nThe wordpress plugin automatically sets the `Accept` header for the\ncompatible SimplyRETS media types.\n\n### Pagination\nThere a few pieces of useful information about each request stored\nin the HTTP Headers:\n\n- `X-Total-Count` shows you the total amount of listings that match\n  your current query.\n- `Link` contains pre-built pagination links for accessing the next\n'page' of listings that match your query. Read more about that\n[here](https://simplyrets.com/blog/api-pagination.html).\n

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SimplyRetsClient
  # Rets MLS Listing Property
  class Property
    # Property roof description
    attr_accessor :roof

    # A description of the cooling or air conditioning features of the property.
    attr_accessor :cooling

    # Property style description or short string
    attr_accessor :style

    # Square footage of the building associated with a listing
    attr_accessor :area

    # Number of full bathrooms
    attr_accessor :baths_full

    # Number of half bathrooms
    attr_accessor :baths_half

    # Number of stories or levels. Represented as a `double' to\naccount for half stories.\n
    attr_accessor :stories

    # Number of fireplaces
    attr_accessor :fireplaces

    # The type(s) of flooring found within the property.
    attr_accessor :flooring

    # Heating description or short string
    attr_accessor :heating

    attr_accessor :foundation

    attr_accessor :pool_features

    attr_accessor :laundry_features

    attr_accessor :occupant_name

    attr_accessor :lot_description

    # The property's sub-type, i.e. SingleFamilyResidential,\nCondo, etc. Or a list of Sub Types for Mobile, such as\nExpando, Manufactured, Modular, etc.\n
    attr_accessor :sub_type

    # Number of bedrooms
    attr_accessor :bedrooms

    # The properties interior features
    attr_accessor :interior_features

    # Lot size dimensions or square footage as a text. This\nfield is generally used to show the pretty formatted\nlot size.\n
    attr_accessor :lot_size

    attr_accessor :area_source

    # Yearly maintenance expense
    attr_accessor :maintenance_expense

    # Additional room information
    attr_accessor :additional_rooms

    #
    attr_accessor :exterior_features

    # Water description and details
    attr_accessor :water

    # View details and description
    attr_accessor :view

    # The subdivision or community name
    attr_accessor :subdivision

    # The materials that were used in the construction of the property.
    attr_accessor :construction

    attr_accessor :parking

    # Unit of measurement for the lotSizeArea field.  e.g. Square\nFeet, Square Meters, Acres, etc.\n\nIf this field is `null` the units is the default unit\nof measure specified by your RETS provider.\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n
    attr_accessor :lot_size_area_units

    # Abbreviated property type. RES is Residential, CND is CondoOrTownhome,\nRNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land,\nFRM is Farm. See the 'propertySubType' field for more information.\n
    attr_accessor :type

    # Number of garage spaces
    attr_accessor :garage_spaces

    attr_accessor :accessibility

    attr_accessor :occupant_type

    # Year the property was built
    attr_accessor :year_built

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {

        :'roof' => :'roof',

        :'cooling' => :'cooling',

        :'style' => :'style',

        :'area' => :'area',

        :'baths_full' => :'bathsFull',

        :'baths_half' => :'bathsHalf',

        :'stories' => :'stories',

        :'fireplaces' => :'fireplaces',

        :'flooring' => :'flooring',

        :'heating' => :'heating',

        :'foundation' => :'foundation',

        :'pool_features' => :'poolFeatures',

        :'laundry_features' => :'laundryFeatures',

        :'occupant_name' => :'occupantName',

        :'lot_description' => :'lotDescription',

        :'sub_type' => :'subType',

        :'bedrooms' => :'bedrooms',

        :'interior_features' => :'interiorFeatures',

        :'lot_size' => :'lotSize',

        :'area_source' => :'areaSource',

        :'maintenance_expense' => :'maintenanceExpense',

        :'additional_rooms' => :'additionalRooms',

        :'exterior_features' => :'exteriorFeatures',

        :'water' => :'water',

        :'view' => :'view',

        :'subdivision' => :'subdivision',

        :'construction' => :'construction',

        :'parking' => :'parking',

        :'lot_size_area_units' => :'lotSizeAreaUnits',

        :'type' => :'type',

        :'garage_spaces' => :'garageSpaces',

        :'accessibility' => :'accessibility',

        :'occupant_type' => :'occupantType',

        :'year_built' => :'yearBuilt'

      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'roof' => :'String',
        :'cooling' => :'String',
        :'style' => :'String',
        :'area' => :'Integer',
        :'baths_full' => :'Integer',
        :'baths_half' => :'Integer',
        :'stories' => :'Float',
        :'fireplaces' => :'Integer',
        :'flooring' => :'String',
        :'heating' => :'String',
        :'foundation' => :'String',
        :'pool_features' => :'String',
        :'laundry_features' => :'String',
        :'occupant_name' => :'String',
        :'lot_description' => :'String',
        :'sub_type' => :'String',
        :'bedrooms' => :'Integer',
        :'interior_features' => :'String',
        :'lot_size' => :'String',
        :'area_source' => :'String',
        :'maintenance_expense' => :'Float',
        :'additional_rooms' => :'String',
        :'exterior_features' => :'String',
        :'water' => :'String',
        :'view' => :'String',
        :'subdivision' => :'String',
        :'construction' => :'String',
        :'parking' => :'School',
        :'lot_size_area_units' => :'String',
        :'type' => :'String',
        :'garage_spaces' => :'Float',
        :'accessibility' => :'String',
        :'occupant_type' => :'String',
        :'year_built' => :'Integer'

      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}


      if attributes[:'roof']
        self.roof = attributes[:'roof']
      else
        self.roof = "Composition"
      end

      if attributes[:'cooling']
        self.cooling = attributes[:'cooling']
      end

      if attributes[:'style']
        self.style = attributes[:'style']
      else
        self.style = "Ranch, Traditional"
      end

      if attributes[:'area']
        self.area = attributes[:'area']
      else
        self.area = 5984
      end

      if attributes[:'bathsFull']
        self.baths_full = attributes[:'bathsFull']
      end

      if attributes[:'bathsHalf']
        self.baths_half = attributes[:'bathsHalf']
      end

      if attributes[:'stories']
        self.stories = attributes[:'stories']
      else
        self.stories = 2.0
      end

      if attributes[:'fireplaces']
        self.fireplaces = attributes[:'fireplaces']
      else
        self.fireplaces = 1
      end

      if attributes[:'flooring']
        self.flooring = attributes[:'flooring']
      end

      if attributes[:'heating']
        self.heating = attributes[:'heating']
      else
        self.heating = "Central System, Forced Air, Gas"
      end

      if attributes[:'foundation']
        self.foundation = attributes[:'foundation']
      end

      if attributes[:'poolFeatures']
        self.pool_features = attributes[:'poolFeatures']
      end

      if attributes[:'laundryFeatures']
        self.laundry_features = attributes[:'laundryFeatures']
      end

      if attributes[:'occupantName']
        self.occupant_name = attributes[:'occupantName']
      end

      if attributes[:'lotDescription']
        self.lot_description = attributes[:'lotDescription']
      end

      if attributes[:'subType']
        self.sub_type = attributes[:'subType']
      end

      if attributes[:'bedrooms']
        self.bedrooms = attributes[:'bedrooms']
      else
        self.bedrooms = 5
      end

      if attributes[:'interiorFeatures']
        self.interior_features = attributes[:'interiorFeatures']
      else
        self.interior_features = "2-Story Foyer,9 ft + Ceil Main,Cathedral Ceiling,Double Vnty\nOther,High Speed Internet Available,Entrance Foyer,Hardwood\nFloors,Trey Ceilings,Walk-In Closet(s),Wall/Wall Carpet\n"
      end

      if attributes[:'lotSize']
        self.lot_size = attributes[:'lotSize']
      else
        self.lot_size = "3/4 Up To 1 Acre"
      end

      if attributes[:'areaSource']
        self.area_source = attributes[:'areaSource']
      else
        self.area_source = "Tax Record"
      end

      if attributes[:'maintenanceExpense']
        self.maintenance_expense = attributes[:'maintenanceExpense']
      end

      if attributes[:'additionalRooms']
        self.additional_rooms = attributes[:'additionalRooms']
      end

      if attributes[:'exteriorFeatures']
        self.exterior_features = attributes[:'exteriorFeatures']
      else
        self.exterior_features = "1-2 Step Entry,Barn(s),Fenced Yard,Front Porch,Garden\nArea,Guest House,Out-Buildings,Patio,Prof Landscaping\n"
      end

      if attributes[:'water']
        self.water = attributes[:'water']
      end

      if attributes[:'view']
        self.view = attributes[:'view']
      end

      if attributes[:'subdivision']
        self.subdivision = attributes[:'subdivision']
      else
        self.subdivision = "River Oaks"
      end

      if attributes[:'construction']
        self.construction = attributes[:'construction']
      end

      if attributes[:'parking']
        self.parking = attributes[:'parking']
      end

      if attributes[:'lotSizeAreaUnits']
        self.lot_size_area_units = attributes[:'lotSizeAreaUnits']
      else
        self.lot_size_area_units = "Sq Ft"
      end

      if attributes[:'type']
        self.type = attributes[:'type']
      else
        self.type = "RES"
      end

      if attributes[:'garageSpaces']
        self.garage_spaces = attributes[:'garageSpaces']
      end

      if attributes[:'accessibility']
        self.accessibility = attributes[:'accessibility']
      end

      if attributes[:'occupantType']
        self.occupant_type = attributes[:'occupantType']
      end

      if attributes[:'yearBuilt']
        self.year_built = attributes[:'yearBuilt']
      else
        self.year_built = 2007
      end

    end

    # Custom attribute writer method checking allowed values (enum).
    def type=(type)
      allowed_values = ["RES", "CND", "RNT", "MLF", "CRE", "LND", "FRM"]
      if type && !allowed_values.include?(type)
        fail "invalid value for 'type', must be one of #{allowed_values}"
      end
      @type = type
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          roof == o.roof &&
          cooling == o.cooling &&
          style == o.style &&
          area == o.area &&
          baths_full == o.baths_full &&
          baths_half == o.baths_half &&
          stories == o.stories &&
          fireplaces == o.fireplaces &&
          flooring == o.flooring &&
          heating == o.heating &&
          foundation == o.foundation &&
          pool_features == o.pool_features &&
          laundry_features == o.laundry_features &&
          occupant_name == o.occupant_name &&
          lot_description == o.lot_description &&
          sub_type == o.sub_type &&
          bedrooms == o.bedrooms &&
          interior_features == o.interior_features &&
          lot_size == o.lot_size &&
          area_source == o.area_source &&
          maintenance_expense == o.maintenance_expense &&
          additional_rooms == o.additional_rooms &&
          exterior_features == o.exterior_features &&
          water == o.water &&
          view == o.view &&
          subdivision == o.subdivision &&
          construction == o.construction &&
          parking == o.parking &&
          lot_size_area_units == o.lot_size_area_units &&
          type == o.type &&
          garage_spaces == o.garage_spaces &&
          accessibility == o.accessibility &&
          occupant_type == o.occupant_type &&
          year_built == o.year_built
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [roof, cooling, style, area, baths_full, baths_half, stories, fireplaces, flooring, heating, foundation, pool_features, laundry_features, occupant_name, lot_description, sub_type, bedrooms, interior_features, lot_size, area_source, maintenance_expense, additional_rooms, exterior_features, water, view, subdivision, construction, parking, lot_size_area_units, type, garage_spaces, accessibility, occupant_type, year_built].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SimplyRetsClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
